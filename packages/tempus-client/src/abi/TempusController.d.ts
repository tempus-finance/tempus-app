/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TempusControllerInterface extends ethers.utils.Interface {
  functions: {
    "depositAndFix(address,uint256,bool,uint256)": FunctionFragment;
    "depositAndProvideLiquidity(address,uint256,bool)": FunctionFragment;
    "depositBacking(address,uint256,address)": FunctionFragment;
    "depositYieldBearing(address,uint256,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "redeemToBacking(address,uint256,uint256)": FunctionFragment;
    "redeemToYieldBearing(address,uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "depositAndFix",
    values: [string, BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndProvideLiquidity",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "depositBacking",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositYieldBearing",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemToBacking",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemToYieldBearing",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "depositAndFix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndProvideLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositBacking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositYieldBearing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemToBacking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemToYieldBearing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Deposited(address,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Redeemed(address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeemed"): EventFragment;
}

export class TempusController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TempusControllerInterface;

  functions: {
    depositAndFix(
      tempusAMM: string,
      tokenAmount: BigNumberish,
      isBackingToken: boolean,
      minTYSRate: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositAndProvideLiquidity(
      tempusAMM: string,
      tokenAmount: BigNumberish,
      isBackingToken: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositBacking(
      targetPool: string,
      backingTokenAmount: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositYieldBearing(
      targetPool: string,
      yieldTokenAmount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    redeemToBacking(
      targetPool: string,
      principalAmount: BigNumberish,
      yieldAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemToYieldBearing(
      targetPool: string,
      principalAmount: BigNumberish,
      yieldAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  depositAndFix(
    tempusAMM: string,
    tokenAmount: BigNumberish,
    isBackingToken: boolean,
    minTYSRate: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositAndProvideLiquidity(
    tempusAMM: string,
    tokenAmount: BigNumberish,
    isBackingToken: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositBacking(
    targetPool: string,
    backingTokenAmount: BigNumberish,
    recipient: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositYieldBearing(
    targetPool: string,
    yieldTokenAmount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  redeemToBacking(
    targetPool: string,
    principalAmount: BigNumberish,
    yieldAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemToYieldBearing(
    targetPool: string,
    principalAmount: BigNumberish,
    yieldAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    depositAndFix(
      tempusAMM: string,
      tokenAmount: BigNumberish,
      isBackingToken: boolean,
      minTYSRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositAndProvideLiquidity(
      tempusAMM: string,
      tokenAmount: BigNumberish,
      isBackingToken: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    depositBacking(
      targetPool: string,
      backingTokenAmount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    depositYieldBearing(
      targetPool: string,
      yieldTokenAmount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    redeemToBacking(
      targetPool: string,
      principalAmount: BigNumberish,
      yieldAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemToYieldBearing(
      targetPool: string,
      principalAmount: BigNumberish,
      yieldAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Deposited(
      pool?: string | null,
      depositor?: string | null,
      recipient?: string | null,
      yieldTokenAmount?: null,
      backingTokenValue?: null,
      shareAmounts?: null,
      interestRate?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        pool: string;
        depositor: string;
        recipient: string;
        yieldTokenAmount: BigNumber;
        backingTokenValue: BigNumber;
        shareAmounts: BigNumber;
        interestRate: BigNumber;
      }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Redeemed(
      pool?: string | null,
      redeemer?: string | null,
      principalShareAmount?: null,
      yieldShareAmount?: null,
      yieldBearingAmount?: null,
      backingTokenValue?: null,
      interestRate?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        pool: string;
        redeemer: string;
        principalShareAmount: BigNumber;
        yieldShareAmount: BigNumber;
        yieldBearingAmount: BigNumber;
        backingTokenValue: BigNumber;
        interestRate: BigNumber;
      }
    >;
  };

  estimateGas: {
    depositAndFix(
      tempusAMM: string,
      tokenAmount: BigNumberish,
      isBackingToken: boolean,
      minTYSRate: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositAndProvideLiquidity(
      tempusAMM: string,
      tokenAmount: BigNumberish,
      isBackingToken: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositBacking(
      targetPool: string,
      backingTokenAmount: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositYieldBearing(
      targetPool: string,
      yieldTokenAmount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    redeemToBacking(
      targetPool: string,
      principalAmount: BigNumberish,
      yieldAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemToYieldBearing(
      targetPool: string,
      principalAmount: BigNumberish,
      yieldAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    depositAndFix(
      tempusAMM: string,
      tokenAmount: BigNumberish,
      isBackingToken: boolean,
      minTYSRate: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositAndProvideLiquidity(
      tempusAMM: string,
      tokenAmount: BigNumberish,
      isBackingToken: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositBacking(
      targetPool: string,
      backingTokenAmount: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositYieldBearing(
      targetPool: string,
      yieldTokenAmount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemToBacking(
      targetPool: string,
      principalAmount: BigNumberish,
      yieldAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemToYieldBearing(
      targetPool: string,
      principalAmount: BigNumberish,
      yieldAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
