# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@4.1

jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
    docker:
      - image: cimg/node:15.1
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      # Checkout the code as the first step.
      - checkout
      # Next, the node orb's install-packages step will install the dependencies from a package.json.
      # The orb install-packages step will also automatically cache them for faster future runs.
      - node/install-packages
      # If you are using yarn instead npm, remove the line above and uncomment the two lines below.
      # - node/install-packages:
      #     pkg-manager: yarn
      - run:
          name: Lerna Bootstrap
          command: ./node_modules/.bin/lerna bootstrap
      - run:
          name: Build
          command: npm run build
      - persist_to_workspace:
          root: ./
          paths:
            - ./

  unit-test:
    docker:
      - image: cimg/node:15.1
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Unit Tests
          command: npm test
      - persist_to_workspace:
          root: ./
          paths:
            - ./

  e2e-test:
    docker:
      - image: mcr.microsoft.com/playwright:focal
        environment:
          WALLET_RECOVERY_PHRASE: $WALLET_RECOVERY_PHRASE
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Get MetamMask
          command: |
            mkdir -p ./packages/metamask
            wget  -O ./packages/metamask/metamask.crx "https://clients2.googleusercontent.com/crx/blobs/Acy1k0bhWzQt9ZpXun4I2HOY4h1SyiFlcc3VzJN_L298AxGPgG9FFGG9fogkmJAUqJfbvJuM4333tmdwvHXUxy2HQXlinCj6sc8aEv3JQwT-IbwAiY45kgDGUprl40LgEC_LyICCXBAx_Jj1txPhK6w/extension_10_11_1_0.crx"
            apt-get update > /dev/null 2>&1
            apt-get install -y unzip > /dev/null 2>&1
            echo "  E  X  T  R  A  C  T  I  N  G       M  E  T  A  M  A  S  K"
            yes | unzip -o ./packages/metamask/metamask.crx -d ./packages/metamask
            echo "Metamask extracted sucessfuly."
#            ls ./packages/metamask
      - run:
          name: E2E Tests
          command: |
            xvfb-run npm run e2e
            ls /root/project/test-results
      - persist_to_workspace:
          root: ./
          paths:
            - ./
      - store_test_results:
          path: /root/project/test-results

  deploy-to-stage:
    docker:
      - image: cimg/node:15.1
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Firebase Deploy in Stage
          command: ./node_modules/.bin/lerna run deploy-stage

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  build&test:
    jobs:
      - build
      - unit-test:
          requires:
            - build
      - e2e-test:
          requires:
            - build
      - deploy-to-stage:
          requires:
            - unit-test
            - e2e-test
          filters:
            branches:
              only: master
      # For running simple node tests, you could optionally use the node/test job from the orb to replicate and replace the job above in fewer lines.
      # - node/test
