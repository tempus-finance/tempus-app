# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@5.0.2

jobs:
  bootstrap:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - node/install-packages
      - run:
          name: Bootstrap
          command: ./node_modules/.bin/lerna bootstrap
      - persist_to_workspace:
          root: ./
          paths:
            - ./

  build-tempus-core-services:
    docker:
      - image: cimg/node:lts
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Build Tempus Core Services
          command: npm --prefix ./packages/tempus-core-services run build
      - persist_to_workspace:
          root: ./
          paths:
            - ./

  build-tempus-client-v3:
    docker:
      - image: cimg/node:lts
    resource_class: large
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Build Tempus Client V3
          command: npm --prefix ./packages/tempus-client_v3 run build
      - persist_to_workspace:
          root: ./
          paths:
            - ./

  start-tempus-client-v3:
    docker:
      - image: cimg/node:lts
    resource_class: large
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Start Tempus Client V3
          command: (npm --prefix ./packages/tempus-client_v3 run start&)
      - run: sleep 100
      - persist_to_workspace:
          root: ./
          paths:
            - ./

  build-storybook:
    docker:
      - image: cimg/node:lts
    resource_class: large
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Build Storybook
          command: npm --prefix ./packages/tempus-client_v3 run build-storybook
      - persist_to_workspace:
          root: ./
          paths:
            - ./

  test-tempus-client-v3:
    docker:
      - image: cimg/node:lts
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Unit Test - Tempus Client v3
          command: npm --prefix ./packages/tempus-client_v3 run ci:test

  test-tempus-core-services:
    docker:
      - image: cimg/node:lts
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Unit Test - Tempus Core Services
          command: npm --prefix ./packages/tempus-core-services run ci:test

  metamask:
    docker:
      - image: mcr.microsoft.com/playwright:focal
        environment:
          METAMASK_RECOVERY_PHRASE: $METAMASK_RECOVERY_PHRASE
          METAMASK_PASSWORD: $METAMASK_PASSWORD
          METAMASK_ACCOUNT_ETH_FORK: $METAMASK_ACCOUNT_ETH_FORK
          METAMASK_ACCOUNT_FANTOM: $METAMASK_ACCOUNT_FANTOM
          NODE_ENV: development
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: MetaMask Setup
          command: |
            apt update
            apt install -y p7zip-full
            npm install -g typescript
            npm install -g ts-node
            npx playwright install
            xvfb-run --auto-servernum --server-num=1 npm run mm-setup
      - persist_to_workspace:
          root: ./
          paths:
            - ./
      - store_test_results:
          path: /root/project/test-results
      - store_artifacts:
          path: /root/project/test-results

  e2e-test:
    docker:
      - image: mcr.microsoft.com/playwright:focal
        environment:
          METAMASK_RECOVERY_PHRASE: $METAMASK_RECOVERY_PHRASE
          METAMASK_PASSWORD: $METAMASK_PASSWORD
          METAMASK_ACCOUNT_ETH_FORK: $METAMASK_ACCOUNT_ETH_FORK
          METAMASK_ACCOUNT_FANTOM: $METAMASK_ACCOUNT_FANTOM
          NODE_ENV: development
    parallelism: 4
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: E2E Tests
          command: |
            npx playwright install
            TEST_FILES=$(circleci tests glob "/root/project/integration-testing/tests/*.spec.ts" | circleci tests split)
            echo "Executing test files:" $TEST_FILES
            xvfb-run --auto-servernum --server-num=1 npm run e2e $TEST_FILES
            ls /root/project/test-results
      - persist_to_workspace:
          root: ./
          paths:
            - ./
      - store_test_results:
          path: /root/project/test-results
      - store_artifacts:
          path: /root/project/test-results

  deploy-to-stage:
    docker:
      - image: cimg/node:lts
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Firebase Deploy in Stage
          command: ./node_modules/.bin/lerna run deploy-stage

  deploy-storybook:
    docker:
      - image: cimg/node:lts
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Deploy Storybook
          command: npm --prefix ./packages/tempus-client_v3 run deploy-storybook

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  tempus-app-ci:
    jobs:
      - bootstrap
      - build-tempus-core-services:
          requires:
            - bootstrap
      - build-tempus-client-v3:
          requires:
            - build-tempus-core-services
      - start-tempus-client-v3:
          requires:
            - build-tempus-client-v3
      - metamask:
          requires:
            - start-tempus-client-v3
      - build-storybook:
          requires:
            - build-tempus-client-v3
      - test-tempus-client-v3:
          requires:
            - build-tempus-core-services
      - test-tempus-core-services:
          requires:
            - bootstrap
      - e2e-test:
          requires:
            - metamask
      - deploy-storybook:
          requires:
            - build-storybook
          filters:
            branches:
              only: /^release-.*$/
      - deploy-to-stage:
          requires:
            - test-tempus-client-v3
            - test-tempus-core-services
          filters:
            branches:
              only: master
      # For running simple node tests, you could optionally use the node/test job from the orb to replicate and replace the job above in fewer lines.
      # - node/test