'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.download = download;
exports.downloadById = downloadById;
exports.downloadBuffer = downloadBuffer;
exports.extractExtensionId = extractExtensionId;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _got = require('got');

var _got2 = _interopRequireDefault(_got);

var _urijs = require('urijs');

var _urijs2 = _interopRequireDefault(_urijs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var URL_PATTERN = 'https://update.googleapis.com/service/update2/crx?response=redirect&acceptformat=crx3&prodversion=38.0&testsource=download-crx&x=id%3D[EXTENSION_ID]%26installsource%3Dondemand%26uc'; /**
                                                                                                                                                                                                           * @author https://github.com/acvetkov
                                                                                                                                                                                                           * @overview Download crx from Chrome WebStore
                                                                                                                                                                                                           */

var USER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.84 Safari/537.36';

var headers = {
    'User-Agent': USER_AGENT,
    'Referer': 'https://chrome.google.com'
};

/**
 * Download extension from Chrome WebStore
 * @param {String} extensionUrl
 * @param {String} savePath
 * @param {String} extensionName
 * @returns {Promise}
 */
function download(extensionUrl) {
    var savePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : __dirname;
    var extensionName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'extension';

    var extensionId = extractExtensionId(extensionUrl);
    return downloadById(extensionId, savePath, extensionName);
}

/**
 * Download extension by chrome webstore item id
 * @param {String} extensionId
 * @param {String} savePath
 * @param {String} extensionName
 * @returns {Promise}
 */
function downloadById(extensionId) {
    var savePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : __dirname;
    var extensionName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'extension';

    var options = {
        headers: headers
    };
    var filePath = _path2.default.resolve(savePath, extensionName + '.crx');
    return new Promise(function (resolve, reject) {
        _got2.default.stream(URL_PATTERN.replace('[EXTENSION_ID]', extensionId), options).pipe(_fs2.default.createWriteStream(filePath)).on('finish', function () {
            return resolve(filePath);
        }).on('error', reject);
    });
}

/**
 * Downloads extension
 * @param {String} extensionId
 * @returns {Promise<Buffer>}
 */
function downloadBuffer(extensionId) {
    var options = {
        headers: headers
    };
    return new Promise(function (resolve) {
        var buffers = [];
        _got2.default.stream(URL_PATTERN.replace('[EXTENSION_ID]', extensionId), options).on('data', function (chunk) {
            return buffers.push(chunk);
        }).on('end', function () {
            return resolve(Buffer.concat(buffers));
        });
    });
}

/**
 * @param {String} extensionUrl
 * @returns {String}
 */
function extractExtensionId(extensionUrl) {
    var path = new _urijs2.default(extensionUrl).pathname();
    if (path.indexOf('/webstore/detail') !== 0) {
        throw new Error('Invalid extensionUrl. Correct url format: https://chrome.google.com/webstore/detail/[name]/[id] or https://chrome.google.com/webstore/detail/[id]');
    }
    return _lodash2.default.last(path.split('/'));
}