'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _argparse = require('argparse');

var _package = require('../package.json');

var _package2 = _interopRequireDefault(_package);

var _index = require('./index');

var downloadUtils = _interopRequireWildcard(_index);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var parser = new _argparse.ArgumentParser({
    prog: _package2.default.name,
    description: _package2.default.description,
    version: _package2.default.version,
    addHelp: true,
    epilog: 'Chrome extensions autodeploy'
}); /**
     * @author acvetkov@yandex-team.ru
     * @overview cli interface
     */

parser.addArgument(['-u', '--url'], {
    action: 'store',
    dest: 'url',
    required: true
});

parser.addArgument(['-n', '--name'], {
    action: 'store',
    dest: 'name'
});

exports.default = {
    download: function download() {
        var args = parser.parseArgs();
        var savePath = process.cwd();

        return downloadUtils.download(args.url, savePath, args.name || 'extension').then(function (filePath) {
            return console.log('Saved in ' + filePath);
        }).catch(function (err) {
            return console.log(err);
        });
    }
};